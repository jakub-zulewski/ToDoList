@using ToDoList.Application.Commands.EditToDoItem

@model EditToDoItemCommand

@{
    ViewData["Title"] = "Edit task";
}

<h1>Edit @Model.Title</h1>
<hr />
<div class="row">
    <div class="col-md-4 mx-auto">
        <form asp-action="Edit" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="mb-3 form-group">
                <label asp-for="Title" class="control-label">Title</label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="mb-3 form-group">
                <label asp-for="Description" class="control-label">Description</label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="mb-3 form-group">
                <label class="form-label" asp-for="DueDate">Date</label>
                <input class="form-control" type="date" asp-for="DueDate" />
                <span asp-validation-for="DueDate" class="text-danger"></span>
            </div>
            <div class="mb-3 form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsCompleted" /> Is done
                </label>
            </div>
            <div class="form-group text-center">
                <input type="submit" value="Edit" class="btn btn-primary btn-lg" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
